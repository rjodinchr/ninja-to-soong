//
// This file has been auto-generated by ninja-to-soong
//
// ******************************
// *** DO NOT MODIFY MANUALLY ***
// ******************************
//
// https://github.com/rjodinchr/ninja-to-soong
//

package {
    default_visibility: ["//external/clvk"],
    default_applicable_licenses: ["clspv_license"],
}

license {
    name: "clspv_license",
    visibility: [":__subpackages__"],
    license_kinds: ["SPDX-license-identifier-Apache-2.0"],
    license_text: ["LICENSE"],
}

cc_library_static {
    name: "clspv_lib_libclspv_core_a",
    srcs: ["lib/*.cpp"],
    local_include_dirs: ["include"],
    generated_headers: [
        "clspv_cmake_clspv-builtins_h",
        "clspv_include_clspv_clspv64_builtin_library_h",
        "clspv_include_clspv_clspv_builtin_library_h",
        "clspv_include_clspv_opencl_builtins_header_h",
        "clspv_include_clspv_spirv_c_strings_hpp",
        "clspv_include_clspv_spirv_glsl_hpp",
        "clspv_include_clspv_spirv_reflection_hpp",
    ],
    header_libs: [
        "SPIRV-Headers-includes",
        "clang-includes",
        "llvm-includes",
    ],
    export_include_dirs: ["include"],
    optimize_for_size: true,
}

cc_genrule {
    name: "clspv_include_clspv_spirv_reflection_hpp",
    cmd: "$(location) --input-file=$(location :SpirvHeaders_include_spirv_unified1_extinst_nonsemantic_clspvreflection_grammar_json) --output-file=$(location clspv/spirv_reflection.hpp) --namespace=reflection",
    srcs: [":SpirvHeaders_include_spirv_unified1_extinst_nonsemantic_clspvreflection_grammar_json"],
    out: ["clspv/spirv_reflection.hpp"],
    tool_files: ["cmake/spirv_ext_inst.py"],
}

cc_genrule {
    name: "clspv_include_clspv_spirv_glsl_hpp",
    cmd: "$(location) --input-file=$(location :SpirvHeaders_include_spirv_unified1_extinst_glsl_std_450_grammar_json) --output-file=$(location clspv/spirv_glsl.hpp) --namespace=glsl",
    srcs: [":SpirvHeaders_include_spirv_unified1_extinst_glsl_std_450_grammar_json"],
    out: ["clspv/spirv_glsl.hpp"],
    tool_files: ["cmake/spirv_ext_inst.py"],
}

cc_genrule {
    name: "clspv_include_clspv_spirv_c_strings_hpp",
    cmd: "$(location) --input-file=$(location :SpirvHeaders_include_spirv_unified1_spirv_hpp) --output-file=$(location clspv/spirv_c_strings.hpp) --namespace=spv",
    srcs: [":SpirvHeaders_include_spirv_unified1_spirv_hpp"],
    out: ["clspv/spirv_c_strings.hpp"],
    tool_files: ["cmake/spirv_c_strings.py"],
}

cc_genrule {
    name: "clspv_include_clspv_clspv_builtin_library_h",
    cmd: "$(location) --input-header-file=$(location :LibclcBins_tools_libclc_clspv--_bc) --output-file=$(location clspv/clspv_builtin_library.h) --header-var=clspv_builtin_library_data --header-size=clspv_builtin_library_size",
    srcs: [":LibclcBins_tools_libclc_clspv--_bc"],
    out: ["clspv/clspv_builtin_library.h"],
    tool_files: ["cmake/bake_file.py"],
}

cc_genrule {
    name: "clspv_cmake_clspv-builtins_h",
    cmd: "$(location) --output-file=$(location cmake/clspv-builtins.h)",
    out: ["cmake/clspv-builtins.h"],
    tool_files: ["cmake/define_clspv_builtins.py"],
}

cc_genrule {
    name: "clspv_include_clspv_opencl_builtins_header_h",
    cmd: "$(location) --input-header-file=$(location :clspv_cmake_clspv-builtins_h) --input-base-file=$(location :ClangHeaders_lib_Headers_opencl-c-base_h) --output-file=$(location clspv/opencl_builtins_header.h) --header-var=clspv_builtins_header_data --header-size-var=clspv_builtins_header_size --base-var=opencl_base_builtins_header_data --base-size-var=opencl_base_builtins_header_size",
    srcs: [
        ":ClangHeaders_lib_Headers_opencl-c-base_h",
        ":clspv_cmake_clspv-builtins_h",
    ],
    out: ["clspv/opencl_builtins_header.h"],
    tool_files: ["cmake/bake_file.py"],
}

cc_genrule {
    name: "clspv_include_clspv_clspv64_builtin_library_h",
    cmd: "$(location) --input-header-file=$(location :LibclcBins_tools_libclc_clspv64--_bc) --output-file=$(location clspv/clspv64_builtin_library.h) --header-var=clspv64_builtin_library_data --header-size=clspv64_builtin_library_size",
    srcs: [":LibclcBins_tools_libclc_clspv64--_bc"],
    out: ["clspv/clspv64_builtin_library.h"],
    tool_files: ["cmake/bake_file.py"],
}
